//
//  FeedbackView.swift
//  Rerouter
//
//  Created by Shawn Davis on 8/19/23.
//

import SwiftUI
import OSLog

struct FeedbackView: View {
    @State private var title: String = ""
    @State private var email: String = ""
    @State private var description: String = ""
    @State private var includeLogs: Bool = false
    @State private var feedbackType: FeedbackType = .featureRequest
    
    var body: some View {
        Form {
            Section(content: {
                TextField("Title", text: $title)
                TextField("Description", text: $description, axis: .vertical)
                    .lineLimit(6, reservesSpace: true)
            }, footer: {
                Text("Please include as much detail as you can.")
            })
            
            Section {
                Picker("Feedback Type", selection: $feedbackType, content: {
                    Text("Suggestion").tag(FeedbackType.featureRequest)
                    Text("Bug Report").tag(FeedbackType.bugReport)
                })
            }
            
            if feedbackType == .bugReport {
                Section(content: {
                    LabeledContent("Device", value: UIDevice.current.model)
                    LabeledContent("OS", value: UIDevice.current.systemName + " " + UIDevice.current.systemVersion)
                    Toggle(isOn: $includeLogs.animation(), label: {
                        Text("Include Error Logs")
                    })
                    if includeLogs,
                       let logs = try? getLogs(),
                       let logString = String(data: logs, encoding: .utf8)
                    {
                        NavigationLink("Preview Logs", destination: {
                            ScrollView {
                                Text(logString)
                                    .scenePadding()
                                    .monospaced()
                            }
                            .navigationTitle("Error Logs")
                            .navigationBarTitleDisplayMode(.inline)
                        })
                    }
                }, footer: {
                    Text("Error logs do not contain any identifiable information or URLs. Only logs generated by Rerouter are shared.")
                })
            }
            
            Section(content: {
                TextField("Email", text: $email)
            }, footer: {
                Text("This field is optional. Only include your email address if you would like a response.")
            })
            
            Section(content: {
                Button("Submit Feedback", action: {})
                    .disabled(title.isEmpty||description.isEmpty)
            }, footer: {
                Text("Feedback submissions are sent to my email, [contact@fromshawn.dev](mailto:contact@fromshawn.dev), via [FormSubmit](https://formsubmit.co). Any information you chose to share may be retained. No additional information is shared that is not visible on this page.\n\nPlease review FormSubmit's [Privacy Policy](https://formsubmit.co/privacy.pdf)")
            })
        }
        .navigationTitle("Feedback")
    }
}

private enum FeedbackType {
    case bugReport
    case featureRequest
}

private func getGenericDeviceInfo() -> String {
    let deviceIdentity = UIDevice.current.model + " | " + UIDevice.current.systemName + " " + UIDevice.current.systemVersion
    print(deviceIdentity)
    return deviceIdentity
}

private func getLogs() throws -> Data {
    let store = try OSLogStore(scope: .currentProcessIdentifier)
    let position = store.position(timeIntervalSinceLatestBoot: 1)
    print("log!")
    let entries = try store
        .getEntries(at: position)
        .compactMap {
            $0 as? OSLogEntryLog
        }
        .filter {
            $0.subsystem == Bundle.main.bundleIdentifier!
        }
        .map {
            print($0.composedMessage)
            return ExportableLog(date: $0.date, description: $0.composedMessage)
        }
    
    let encoder = JSONEncoder()
    let encodedLogs = try encoder.encode(entries)
    return encodedLogs
}

private struct ExportableLog: Codable {
    var date: Date
    var description: String
}

struct FeedbackView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            FeedbackView()
        }
    }
}
